// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BorrowToken extends ethereum.Event {
  get params(): BorrowToken__Params {
    return new BorrowToken__Params(this);
  }
}

export class BorrowToken__Params {
  _event: BorrowToken;

  constructor(event: BorrowToken) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CreateVault extends ethereum.Event {
  get params(): CreateVault__Params {
    return new CreateVault__Params(this);
  }
}

export class CreateVault__Params {
  _event: CreateVault;

  constructor(event: CreateVault) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DepositCollateral extends ethereum.Event {
  get params(): DepositCollateral__Params {
    return new DepositCollateral__Params(this);
  }
}

export class DepositCollateral__Params {
  _event: DepositCollateral;

  constructor(event: DepositCollateral) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DestroyVault extends ethereum.Event {
  get params(): DestroyVault__Params {
    return new DestroyVault__Params(this);
  }
}

export class DestroyVault__Params {
  _event: DestroyVault;

  constructor(event: DestroyVault) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LiquidateVault extends ethereum.Event {
  get params(): LiquidateVault__Params {
    return new LiquidateVault__Params(this);
  }
}

export class LiquidateVault__Params {
  _event: LiquidateVault;

  constructor(event: LiquidateVault) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get debtRepaid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get closingFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PayBackToken extends ethereum.Event {
  get params(): PayBackToken__Params {
    return new PayBackToken__Params(this);
  }
}

export class PayBackToken__Params {
  _event: PayBackToken;

  constructor(event: PayBackToken) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get closingFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferVault extends ethereum.Event {
  get params(): TransferVault__Params {
    return new TransferVault__Params(this);
  }
}

export class TransferVault__Params {
  _event: TransferVault;

  constructor(event: TransferVault) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class WithdrawCollateral extends ethereum.Event {
  get params(): WithdrawCollateral__Params {
    return new WithdrawCollateral__Params(this);
  }
}

export class WithdrawCollateral__Params {
  _event: WithdrawCollateral;

  constructor(event: WithdrawCollateral) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ftmmusd extends ethereum.SmartContract {
  static bind(address: Address): ftmmusd {
    return new ftmmusd("ftmmusd", address);
  }

  _minimumCollateralPercentage(): BigInt {
    let result = super.call(
      "_minimumCollateralPercentage",
      "_minimumCollateralPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__minimumCollateralPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_minimumCollateralPercentage",
      "_minimumCollateralPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkCollateralPercentage(vaultID: BigInt): BigInt {
    let result = super.call(
      "checkCollateralPercentage",
      "checkCollateralPercentage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultID)]
    );

    return result[0].toBigInt();
  }

  try_checkCollateralPercentage(vaultID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkCollateralPercentage",
      "checkCollateralPercentage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkCost(vaultID: BigInt): BigInt {
    let result = super.call("checkCost", "checkCost(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultID)
    ]);

    return result[0].toBigInt();
  }

  try_checkCost(vaultID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("checkCost", "checkCost(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkExtract(vaultID: BigInt): BigInt {
    let result = super.call("checkExtract", "checkExtract(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultID)
    ]);

    return result[0].toBigInt();
  }

  try_checkExtract(vaultID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkExtract",
      "checkExtract(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkLiquidation(vaultID: BigInt): boolean {
    let result = super.call(
      "checkLiquidation",
      "checkLiquidation(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(vaultID)]
    );

    return result[0].toBoolean();
  }

  try_checkLiquidation(vaultID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkLiquidation",
      "checkLiquidation(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(vaultID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  closingFee(): BigInt {
    let result = super.call("closingFee", "closingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_closingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("closingFee", "closingFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateral(): Address {
    let result = super.call("collateral", "collateral():(address)", []);

    return result[0].toAddress();
  }

  try_collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("collateral", "collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createVault(): BigInt {
    let result = super.call("createVault", "createVault():(uint256)", []);

    return result[0].toBigInt();
  }

  try_createVault(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createVault", "createVault():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtRatio(): BigInt {
    let result = super.call("debtRatio", "debtRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_debtRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("debtRatio", "debtRatio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ethPriceSource(): Address {
    let result = super.call("ethPriceSource", "ethPriceSource():(address)", []);

    return result[0].toAddress();
  }

  try_ethPriceSource(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ethPriceSource",
      "ethPriceSource():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exists(vaultID: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(vaultID)
    ]);

    return result[0].toBoolean();
  }

  try_exists(vaultID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(vaultID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  gainRatio(): BigInt {
    let result = super.call("gainRatio", "gainRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gainRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gainRatio", "gainRatio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getClosingFee(): BigInt {
    let result = super.call("getClosingFee", "getClosingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getClosingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClosingFee",
      "getClosingFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDebtCeiling(): BigInt {
    let result = super.call("getDebtCeiling", "getDebtCeiling():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getDebtCeiling(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDebtCeiling",
      "getDebtCeiling():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEthPriceSource(): BigInt {
    let result = super.call(
      "getEthPriceSource",
      "getEthPriceSource():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEthPriceSource(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEthPriceSource",
      "getEthPriceSource():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOpeningFee(): BigInt {
    let result = super.call("getOpeningFee", "getOpeningFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getOpeningFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOpeningFee",
      "getOpeningFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenPriceSource(): BigInt {
    let result = super.call(
      "getTokenPriceSource",
      "getTokenPriceSource():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTokenPriceSource(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenPriceSource",
      "getTokenPriceSource():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maticDebt(param0: Address): BigInt {
    let result = super.call("maticDebt", "maticDebt(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_maticDebt(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maticDebt", "maticDebt(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  musd(): Address {
    let result = super.call("musd", "musd():(address)", []);

    return result[0].toAddress();
  }

  try_musd(): ethereum.CallResult<Address> {
    let result = super.tryCall("musd", "musd():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  openingFee(): BigInt {
    let result = super.call("openingFee", "openingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_openingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("openingFee", "openingFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceSourceDecimals(): BigInt {
    let result = super.call(
      "priceSourceDecimals",
      "priceSourceDecimals():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_priceSourceDecimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceSourceDecimals",
      "priceSourceDecimals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stabilityPool(): Address {
    let result = super.call("stabilityPool", "stabilityPool():(address)", []);

    return result[0].toAddress();
  }

  try_stabilityPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stabilityPool",
      "stabilityPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPeg(): BigInt {
    let result = super.call("tokenPeg", "tokenPeg():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenPeg(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPeg", "tokenPeg():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBorrowed(): BigInt {
    let result = super.call("totalBorrowed", "totalBorrowed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBorrowed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrowed",
      "totalBorrowed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): BigInt {
    let result = super.call("treasury", "treasury():(uint256)", []);

    return result[0].toBigInt();
  }

  try_treasury(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("treasury", "treasury():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(): string {
    let result = super.call("uri", "uri():(string)", []);

    return result[0].toString();
  }

  try_uri(): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  vaultCollateral(param0: BigInt): BigInt {
    let result = super.call(
      "vaultCollateral",
      "vaultCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_vaultCollateral(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultCollateral",
      "vaultCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultCount(): BigInt {
    let result = super.call("vaultCount", "vaultCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_vaultCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultCount", "vaultCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultDebt(param0: BigInt): BigInt {
    let result = super.call("vaultDebt", "vaultDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_vaultDebt(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultDebt", "vaultDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get ethPriceSourceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minimumCollateralPercentage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _musd(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _collateral(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get baseURI(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BorrowTokenCall extends ethereum.Call {
  get inputs(): BorrowTokenCall__Inputs {
    return new BorrowTokenCall__Inputs(this);
  }

  get outputs(): BorrowTokenCall__Outputs {
    return new BorrowTokenCall__Outputs(this);
  }
}

export class BorrowTokenCall__Inputs {
  _call: BorrowTokenCall;

  constructor(call: BorrowTokenCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BorrowTokenCall__Outputs {
  _call: BorrowTokenCall;

  constructor(call: BorrowTokenCall) {
    this._call = call;
  }
}

export class ChangeEthPriceSourceCall extends ethereum.Call {
  get inputs(): ChangeEthPriceSourceCall__Inputs {
    return new ChangeEthPriceSourceCall__Inputs(this);
  }

  get outputs(): ChangeEthPriceSourceCall__Outputs {
    return new ChangeEthPriceSourceCall__Outputs(this);
  }
}

export class ChangeEthPriceSourceCall__Inputs {
  _call: ChangeEthPriceSourceCall;

  constructor(call: ChangeEthPriceSourceCall) {
    this._call = call;
  }

  get ethPriceSourceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeEthPriceSourceCall__Outputs {
  _call: ChangeEthPriceSourceCall;

  constructor(call: ChangeEthPriceSourceCall) {
    this._call = call;
  }
}

export class CreateVaultCall extends ethereum.Call {
  get inputs(): CreateVaultCall__Inputs {
    return new CreateVaultCall__Inputs(this);
  }

  get outputs(): CreateVaultCall__Outputs {
    return new CreateVaultCall__Outputs(this);
  }
}

export class CreateVaultCall__Inputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }
}

export class CreateVaultCall__Outputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseDebtCeilingCall extends ethereum.Call {
  get inputs(): DecreaseDebtCeilingCall__Inputs {
    return new DecreaseDebtCeilingCall__Inputs(this);
  }

  get outputs(): DecreaseDebtCeilingCall__Outputs {
    return new DecreaseDebtCeilingCall__Outputs(this);
  }
}

export class DecreaseDebtCeilingCall__Inputs {
  _call: DecreaseDebtCeilingCall;

  constructor(call: DecreaseDebtCeilingCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DecreaseDebtCeilingCall__Outputs {
  _call: DecreaseDebtCeilingCall;

  constructor(call: DecreaseDebtCeilingCall) {
    this._call = call;
  }
}

export class DepositCollateralCall extends ethereum.Call {
  get inputs(): DepositCollateralCall__Inputs {
    return new DepositCollateralCall__Inputs(this);
  }

  get outputs(): DepositCollateralCall__Outputs {
    return new DepositCollateralCall__Outputs(this);
  }
}

export class DepositCollateralCall__Inputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCollateralCall__Outputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }
}

export class DepositNativeCall extends ethereum.Call {
  get inputs(): DepositNativeCall__Inputs {
    return new DepositNativeCall__Inputs(this);
  }

  get outputs(): DepositNativeCall__Outputs {
    return new DepositNativeCall__Outputs(this);
  }
}

export class DepositNativeCall__Inputs {
  _call: DepositNativeCall;

  constructor(call: DepositNativeCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositNativeCall__Outputs {
  _call: DepositNativeCall;

  constructor(call: DepositNativeCall) {
    this._call = call;
  }
}

export class DestroyVaultCall extends ethereum.Call {
  get inputs(): DestroyVaultCall__Inputs {
    return new DestroyVaultCall__Inputs(this);
  }

  get outputs(): DestroyVaultCall__Outputs {
    return new DestroyVaultCall__Outputs(this);
  }
}

export class DestroyVaultCall__Inputs {
  _call: DestroyVaultCall;

  constructor(call: DestroyVaultCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DestroyVaultCall__Outputs {
  _call: DestroyVaultCall;

  constructor(call: DestroyVaultCall) {
    this._call = call;
  }
}

export class GetPaidCall extends ethereum.Call {
  get inputs(): GetPaidCall__Inputs {
    return new GetPaidCall__Inputs(this);
  }

  get outputs(): GetPaidCall__Outputs {
    return new GetPaidCall__Outputs(this);
  }
}

export class GetPaidCall__Inputs {
  _call: GetPaidCall;

  constructor(call: GetPaidCall) {
    this._call = call;
  }
}

export class GetPaidCall__Outputs {
  _call: GetPaidCall;

  constructor(call: GetPaidCall) {
    this._call = call;
  }
}

export class LiquidateVaultCall extends ethereum.Call {
  get inputs(): LiquidateVaultCall__Inputs {
    return new LiquidateVaultCall__Inputs(this);
  }

  get outputs(): LiquidateVaultCall__Outputs {
    return new LiquidateVaultCall__Outputs(this);
  }
}

export class LiquidateVaultCall__Inputs {
  _call: LiquidateVaultCall;

  constructor(call: LiquidateVaultCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateVaultCall__Outputs {
  _call: LiquidateVaultCall;

  constructor(call: LiquidateVaultCall) {
    this._call = call;
  }
}

export class PayBackTokenCall extends ethereum.Call {
  get inputs(): PayBackTokenCall__Inputs {
    return new PayBackTokenCall__Inputs(this);
  }

  get outputs(): PayBackTokenCall__Outputs {
    return new PayBackTokenCall__Outputs(this);
  }
}

export class PayBackTokenCall__Inputs {
  _call: PayBackTokenCall;

  constructor(call: PayBackTokenCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PayBackTokenCall__Outputs {
  _call: PayBackTokenCall;

  constructor(call: PayBackTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetClosingFeeCall extends ethereum.Call {
  get inputs(): SetClosingFeeCall__Inputs {
    return new SetClosingFeeCall__Inputs(this);
  }

  get outputs(): SetClosingFeeCall__Outputs {
    return new SetClosingFeeCall__Outputs(this);
  }
}

export class SetClosingFeeCall__Inputs {
  _call: SetClosingFeeCall;

  constructor(call: SetClosingFeeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetClosingFeeCall__Outputs {
  _call: SetClosingFeeCall;

  constructor(call: SetClosingFeeCall) {
    this._call = call;
  }
}

export class SetDebtRatioCall extends ethereum.Call {
  get inputs(): SetDebtRatioCall__Inputs {
    return new SetDebtRatioCall__Inputs(this);
  }

  get outputs(): SetDebtRatioCall__Outputs {
    return new SetDebtRatioCall__Outputs(this);
  }
}

export class SetDebtRatioCall__Inputs {
  _call: SetDebtRatioCall;

  constructor(call: SetDebtRatioCall) {
    this._call = call;
  }

  get _debtRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDebtRatioCall__Outputs {
  _call: SetDebtRatioCall;

  constructor(call: SetDebtRatioCall) {
    this._call = call;
  }
}

export class SetGainRatioCall extends ethereum.Call {
  get inputs(): SetGainRatioCall__Inputs {
    return new SetGainRatioCall__Inputs(this);
  }

  get outputs(): SetGainRatioCall__Outputs {
    return new SetGainRatioCall__Outputs(this);
  }
}

export class SetGainRatioCall__Inputs {
  _call: SetGainRatioCall;

  constructor(call: SetGainRatioCall) {
    this._call = call;
  }

  get _gainRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGainRatioCall__Outputs {
  _call: SetGainRatioCall;

  constructor(call: SetGainRatioCall) {
    this._call = call;
  }
}

export class SetMinCollateralRatioCall extends ethereum.Call {
  get inputs(): SetMinCollateralRatioCall__Inputs {
    return new SetMinCollateralRatioCall__Inputs(this);
  }

  get outputs(): SetMinCollateralRatioCall__Outputs {
    return new SetMinCollateralRatioCall__Outputs(this);
  }
}

export class SetMinCollateralRatioCall__Inputs {
  _call: SetMinCollateralRatioCall;

  constructor(call: SetMinCollateralRatioCall) {
    this._call = call;
  }

  get minimumCollateralPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinCollateralRatioCall__Outputs {
  _call: SetMinCollateralRatioCall;

  constructor(call: SetMinCollateralRatioCall) {
    this._call = call;
  }
}

export class SetOpeningFeeCall extends ethereum.Call {
  get inputs(): SetOpeningFeeCall__Inputs {
    return new SetOpeningFeeCall__Inputs(this);
  }

  get outputs(): SetOpeningFeeCall__Outputs {
    return new SetOpeningFeeCall__Outputs(this);
  }
}

export class SetOpeningFeeCall__Inputs {
  _call: SetOpeningFeeCall;

  constructor(call: SetOpeningFeeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOpeningFeeCall__Outputs {
  _call: SetOpeningFeeCall;

  constructor(call: SetOpeningFeeCall) {
    this._call = call;
  }
}

export class SetStabilityPoolCall extends ethereum.Call {
  get inputs(): SetStabilityPoolCall__Inputs {
    return new SetStabilityPoolCall__Inputs(this);
  }

  get outputs(): SetStabilityPoolCall__Outputs {
    return new SetStabilityPoolCall__Outputs(this);
  }
}

export class SetStabilityPoolCall__Inputs {
  _call: SetStabilityPoolCall;

  constructor(call: SetStabilityPoolCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStabilityPoolCall__Outputs {
  _call: SetStabilityPoolCall;

  constructor(call: SetStabilityPoolCall) {
    this._call = call;
  }
}

export class SetTokenPegCall extends ethereum.Call {
  get inputs(): SetTokenPegCall__Inputs {
    return new SetTokenPegCall__Inputs(this);
  }

  get outputs(): SetTokenPegCall__Outputs {
    return new SetTokenPegCall__Outputs(this);
  }
}

export class SetTokenPegCall__Inputs {
  _call: SetTokenPegCall;

  constructor(call: SetTokenPegCall) {
    this._call = call;
  }

  get _tokenPeg(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTokenPegCall__Outputs {
  _call: SetTokenPegCall;

  constructor(call: SetTokenPegCall) {
    this._call = call;
  }
}

export class SetTokenURICall extends ethereum.Call {
  get inputs(): SetTokenURICall__Inputs {
    return new SetTokenURICall__Inputs(this);
  }

  get outputs(): SetTokenURICall__Outputs {
    return new SetTokenURICall__Outputs(this);
  }
}

export class SetTokenURICall__Inputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetTokenURICall__Outputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCollateralCall extends ethereum.Call {
  get inputs(): WithdrawCollateralCall__Inputs {
    return new WithdrawCollateralCall__Inputs(this);
  }

  get outputs(): WithdrawCollateralCall__Outputs {
    return new WithdrawCollateralCall__Outputs(this);
  }
}

export class WithdrawCollateralCall__Inputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get unwrap(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawCollateralCall__Outputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }
}
