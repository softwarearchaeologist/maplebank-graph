// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Protocol entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Protocol entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Protocol", id.toString(), this);
  }

  static load(id: string): Protocol | null {
    return store.get("Protocol", id) as Protocol | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalClosingFees(): BigInt {
    let value = this.get("totalClosingFees");
    return value.toBigInt();
  }

  set totalClosingFees(value: BigInt) {
    this.set("totalClosingFees", Value.fromBigInt(value));
  }

  get averageCollateralRatio(): BigDecimal {
    let value = this.get("averageCollateralRatio");
    return value.toBigDecimal();
  }

  set averageCollateralRatio(value: BigDecimal) {
    this.set("averageCollateralRatio", Value.fromBigDecimal(value));
  }

  get totalDeposited(): BigInt {
    let value = this.get("totalDeposited");
    return value.toBigInt();
  }

  set totalDeposited(value: BigInt) {
    this.set("totalDeposited", Value.fromBigInt(value));
  }

  get totalBorrowed(): BigInt {
    let value = this.get("totalBorrowed");
    return value.toBigInt();
  }

  set totalBorrowed(value: BigInt) {
    this.set("totalBorrowed", Value.fromBigInt(value));
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vault entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vault entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vault", id.toString(), this);
  }

  static load(id: string): Vault | null {
    return store.get("Vault", id) as Vault | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get deposited(): BigInt {
    let value = this.get("deposited");
    return value.toBigInt();
  }

  set deposited(value: BigInt) {
    this.set("deposited", Value.fromBigInt(value));
  }

  get borrowed(): BigInt {
    let value = this.get("borrowed");
    return value.toBigInt();
  }

  set borrowed(value: BigInt) {
    this.set("borrowed", Value.fromBigInt(value));
  }

  get closingFees(): BigInt {
    let value = this.get("closingFees");
    return value.toBigInt();
  }

  set closingFees(value: BigInt) {
    this.set("closingFees", Value.fromBigInt(value));
  }

  get collateralRatio(): BigDecimal {
    let value = this.get("collateralRatio");
    return value.toBigDecimal();
  }

  set collateralRatio(value: BigDecimal) {
    this.set("collateralRatio", Value.fromBigDecimal(value));
  }

  get liquidations(): Array<string> | null {
    let value = this.get("liquidations");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidations(value: Array<string> | null) {
    if (value === null) {
      this.unset("liquidations");
    } else {
      this.set("liquidations", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Liquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Liquidation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Liquidation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Liquidation", id.toString(), this);
  }

  static load(id: string): Liquidation | null {
    return store.get("Liquidation", id) as Liquidation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get loss(): BigInt {
    let value = this.get("loss");
    return value.toBigInt();
  }

  set loss(value: BigInt) {
    this.set("loss", Value.fromBigInt(value));
  }

  get debt(): BigInt {
    let value = this.get("debt");
    return value.toBigInt();
  }

  set debt(value: BigInt) {
    this.set("debt", Value.fromBigInt(value));
  }

  get ethPriceAtTime(): BigInt {
    let value = this.get("ethPriceAtTime");
    return value.toBigInt();
  }

  set ethPriceAtTime(value: BigInt) {
    this.set("ethPriceAtTime", Value.fromBigInt(value));
  }

  get tokenPriceAtTime(): BigInt {
    let value = this.get("tokenPriceAtTime");
    return value.toBigInt();
  }

  set tokenPriceAtTime(value: BigInt) {
    this.set("tokenPriceAtTime", Value.fromBigInt(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaults(): Array<string> {
    let value = this.get("vaults");
    return value.toStringArray();
  }

  set vaults(value: Array<string>) {
    this.set("vaults", Value.fromStringArray(value));
  }

  get liquidations(): Array<string> {
    let value = this.get("liquidations");
    return value.toStringArray();
  }

  set liquidations(value: Array<string>) {
    this.set("liquidations", Value.fromStringArray(value));
  }
}
